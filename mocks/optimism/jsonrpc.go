// Code generated by mockery v2.28.2. DO NOT EDIT.

package optimism

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	rpc "github.com/ethereum-optimism/optimism/l2geth/rpc"
)

// JSONRPC is an autogenerated mock type for the JSONRPC type
type JSONRPC struct {
	mock.Mock
}

// BatchCallContext provides a mock function with given fields: ctx, b
func (_m *JSONRPC) BatchCallContext(ctx context.Context, b []rpc.BatchElem) error {
	ret := _m.Called(ctx, b)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []rpc.BatchElem) error); ok {
		r0 = rf(ctx, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CallContext provides a mock function with given fields: ctx, result, method, args
func (_m *JSONRPC) CallContext(ctx context.Context, result interface{}, method string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, result, method)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) error); ok {
		r0 = rf(ctx, result, method, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *JSONRPC) Close() {
	_m.Called()
}

type mockConstructorTestingTNewJSONRPC interface {
	mock.TestingT
	Cleanup(func())
}

// NewJSONRPC creates a new instance of JSONRPC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJSONRPC(t mockConstructorTestingTNewJSONRPC) *JSONRPC {
	mock := &JSONRPC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
